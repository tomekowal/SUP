#!/usr/bin/env escript
%% -*- erlang -*-

-define(SCRIPT_RIGHTS, "0775").

main(Arguments) ->
    file:set_cwd(filename:dirname(escript:script_name())),
    Config = load_config(),
    main(Arguments, Config).

main([ApplicationName], Config) ->
    {ok, ApplicationDirs} = file:list_dir(config_get(Config, source_dir)++"/lib"),
    case lists:filter(fun(Dir) -> is_app_dir(ApplicationName, Dir) end, ApplicationDirs) of
        [SingleAppDir] ->
            [ApplicationName, Version] = string:tokens(SingleAppDir, "-"),
            main([ApplicationName, Version], Config);
        [_Dir1, _Dir2 | _Rest] ->
            io:format("Multiple versions for this application were found. Specify version explicitly.~n");
        [] ->
            io:format("Application ~s not found.~n", [ApplicationName])
    end;
main([ApplicationName, Version], Config) ->
    PackageName = application_package_name(ApplicationName, Config),

    Variables = get_variables(ApplicationName, Version, Config),

    execute_command("rm -rf "++PackageName),
    initialize_pkg_dirs(ApplicationName, Config),
    file:set_cwd(PackageName),

    save("DEBIAN/control", fill_template("../templates/control-app", Variables)),
    save("DEBIAN/prerm", fill_template("../templates/prerm-app", Variables), ?SCRIPT_RIGHTS),
    save("DEBIAN/postinst", fill_template("../templates/postinst-app", Variables), ?SCRIPT_RIGHTS),

    TargetRoot = config_get(Config, target_root),
    SourceDir = config_get(Config, source_dir),
    ArchiveFile = string:sub_string(TargetRoot, 2)++"/debian/applications/"++ApplicationName,
    Result = execute_commands(
               [
                "tar czf "++ArchiveFile++".tar.gz -C ../"++SourceDir++" lib/"++ApplicationName++"-"++Version,
                "mv "++ArchiveFile++".tar.gz "++ArchiveFile,
                "md5sum `find . -type f | awk '/."++escape_slashes(TargetRoot)++"/ { print substr($0, 3) }'` > DEBIAN/md5sums",
                "dpkg -b . .."
               ]
              ),

    file:set_cwd(".."),
    CleanupResult = execute_command("rm -rf "++PackageName),

    case Result+CleanupResult of
        0 ->
            io:format("*** Package building successful ***~n"),
            ok;
        _ ->
            io:format("*** Package building failed ***~n"),
            failed
    end;
main(_, _Config) ->
    io:format("Usage: ~s application [version]~n", [filename:basename(escript:script_name())]).

load_config() ->
    {ok, Config} = file:consult("debian.config"),
    Config.

config_get(Config, Key) ->
    {Key, Value} = lists:keyfind(Key, 1, Config),
    Value.

get_variables(ApplicationName, Version, Config) ->
    Application = list_to_atom(ApplicationName),
    AppDir = config_get(Config, source_dir)++"/lib/"++ApplicationName++"-"++Version,
    {ok, [AppFileContents]} = file:consult(AppDir++"/ebin/"++ApplicationName++".app"),
    {application, Application, AppConfig} = AppFileContents,

    PackageName = application_package_name(ApplicationName, Config),

    {vsn, Version} = lists:keyfind(vsn, 1, AppConfig),
    {description, Description} = lists:keyfind(description, 1, AppConfig),
    {applications, Applications} = lists:keyfind(applications, 1, AppConfig),

    Dependencies = [base_package_name(Config)]
        ++lists:map(fun(App) -> application_package_name(atom_to_list(App), Config) end, Applications),

    [
     {target_root, config_get(Config, target_root)},
     {application, ApplicationName},
     {package, PackageName},
     {vsn, Version},
     {maintainer, config_get(Config, maintainer)},
     {description, Description},
     {dependencies, Dependencies}
    ].

initialize_pkg_dirs(ApplicationName, Config) ->
    PackageName = application_package_name(ApplicationName, Config),

    os:cmd("mkdir -p "++PackageName++"/DEBIAN"),
    os:cmd("mkdir -p "++PackageName++config_get(Config, target_root)++"/debian/applications").

%% debian package name cannot contain underscores
application_package_name(ApplicationName, Config) ->
    {ok, UnderscoreRegex} = re:compile("_"),
    config_get(Config, nodename)++"-"++re:replace(ApplicationName, UnderscoreRegex, "-", [global, {return, list}]).

base_package_name(Config) ->
    config_get(Config, nodename)++"-base".

escape_slashes(String) ->
    {ok, SlashRegex} = re:compile("/"),
    re:replace(String, SlashRegex, "\\\\/", [global, {return, list}]).

is_app_dir(ApplicationName, Directory) ->
    {ok, Regex} = re:compile("^"++ApplicationName++"-"++"\\d+[\.\\d+]*$"),
    case re:run(Directory, Regex) of
        {match, _} ->
            true;
        nomatch ->
            false
    end.

save(File, Contents) ->
    {ok, FileDevice} = file:open(File, [write]),
    io:fwrite(FileDevice, "~s", [Contents]),
    ok = file:close(FileDevice).
save(File, Contents, Rights) ->
    save(File, Contents),
    os:cmd("chmod "++Rights++" "++File),
    ok.

fill_template(TemplateFile, Variables) ->
    erlydtl:compile(TemplateFile, template),
    {ok, Result} = template:render(Variables),
    string:join(Result, "").

execute_command(Command) ->
    io:format("> ~s~n", [Command]),
    Result = os:cmd(Command),
    io:format("~s", [Result]),
    list_to_integer(os:cmd("echo -n $?")).

execute_commands([]) ->
    0;
execute_commands([Command|Rest]) ->
    case execute_command(Command) of
        0 ->
            execute_commands(Rest);
        NonzeroExitCode ->
            NonzeroExitCode
    end.
