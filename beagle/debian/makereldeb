#!/usr/bin/env escript
%% -*- erlang -*-

-define(SCRIPT_RIGHTS, "0775").

main(Arguments) ->
    file:set_cwd(filename:dirname(escript:script_name())),
    Config = load_config(),
    main(Arguments, Config).

main([Version], Config) ->
    PackageName = release_package_name(Config),

    Variables = get_variables(Version, Config),
    execute_command("rm -rf "++PackageName),
    initialize_pkg_dirs(Config),
    file:set_cwd(PackageName),

    save("DEBIAN/control", fill_template("../templates/control-rel", Variables)),
    save("DEBIAN/prerm", fill_template("../templates/prerm-rel", Variables), ?SCRIPT_RIGHTS),
    save("DEBIAN/postrm", fill_template("../templates/postrm-rel", Variables), ?SCRIPT_RIGHTS),
    save("DEBIAN/preinst", fill_template("../templates/preinst-rel", Variables), ?SCRIPT_RIGHTS),
    save("DEBIAN/postinst", fill_template("../templates/postinst-rel", Variables), ?SCRIPT_RIGHTS),

    TargetRoot = config_get(Config, target_root),
    SourceDir = config_get(Config, source_dir),
    ArchiveFile = "."++filename:join([TargetRoot, "debian/releases", config_get(Config, nodename)]),
    Result = execute_commands(
               [
                "tar czf "++ArchiveFile++".tar.gz -C ../"++SourceDir++" releases/"++Version,
                "mv "++ArchiveFile++".tar.gz "++ArchiveFile,
                "md5sum `find . -type f | awk '/."++escape_slashes(TargetRoot)++"/ { print substr($0, 3) }'` > DEBIAN/md5sums",
                "dpkg -b . .."
               ]
              ),

    case Result of
        0 ->
            io:format("*** Package building successful ***~n"),
            ok;
        _ ->
            io:format("*** Package building failed ***~n"),
            failed
    end;
main(_, _Config) ->
    io:format("Usage: ~s version~n", [filename:basename(escript:script_name())]).

load_config() ->
    {ok, Config} = file:consult("debian.config"),
    Config.

config_get(Config, Key) ->
    {Key, Value} = lists:keyfind(Key, 1, Config),
    Value.

get_variables(Version, Config) ->
    Nodename = config_get(Config, nodename),
    RelDir = config_get(Config, source_dir)++"/releases/"++Version,
    {ok, [RelFileContents]} = file:consult(RelDir++"/"++Nodename++".rel"),
    {release, {Nodename, Version}, {erts, ErtsVersion}, Applications} = RelFileContents,

    PackageName = release_package_name(Config),
    Dependencies = [base_package_name(Config)++" (= "++ErtsVersion++")"]
        ++lists:map(
            fun({App, AppVer}) ->
                    application_package_name(atom_to_list(App), Config)++" (= "++AppVer++")"
            end,
            Applications
           ),

    [
     {target_root, config_get(Config, target_root)},
     {erts_vsn, ErtsVersion},
     {release, config_get(Config, nodename)},
     {package, PackageName},
     {vsn, Version},
     {maintainer, config_get(Config, maintainer)},
     {description, config_get(Config, description)},
     {dependencies, Dependencies}
    ].

initialize_pkg_dirs(Config) ->
    PackageName = release_package_name(Config),

    os:cmd("mkdir -p "++PackageName++"/DEBIAN"),
    os:cmd("mkdir -p "++PackageName++config_get(Config, target_root)++"/debian/releases").

release_package_name(Config) ->
    config_get(Config, nodename).

application_package_name(ApplicationName, Config) ->
    {ok, UnderscoreRegex} = re:compile("_"),
    config_get(Config, nodename)++"-"++re:replace(ApplicationName, UnderscoreRegex, "-", [global, {return, list}]).

base_package_name(Config) ->
    config_get(Config, nodename)++"-base".

escape_slashes(String) ->
    {ok, SlashRegex} = re:compile("/"),
    re:replace(String, SlashRegex, "\\\\/", [global, {return, list}]).

save(File, Contents) ->
    {ok, FileDevice} = file:open(File, [write]),
    io:fwrite(FileDevice, "~s", [Contents]),
    ok = file:close(FileDevice).
save(File, Contents, Rights) ->
    save(File, Contents),
    os:cmd("chmod "++Rights++" "++File),
    ok.

fill_template(TemplateFile, Variables) ->
    erlydtl:compile(TemplateFile, template),
    {ok, Result} = template:render(Variables),
    string:join(Result, "").

execute_command(Command) ->
    io:format("> ~s~n", [Command]),
    Result = os:cmd(Command),
    io:format("~s", [Result]),
    list_to_integer(os:cmd("echo -n $?")).

execute_commands([]) ->
    0;
execute_commands([Command|Rest]) ->
    case execute_command(Command) of
        0 ->
            execute_commands(Rest);
        NonzeroExitCode ->
            NonzeroExitCode
    end.
